/*Search a 2D Matrix*/
/*Write an efficient algorithm that searches for 
a value in an m x n matrix. This matrix has the 
following properties:Integers in each row are sorted from left to right.
The first integer of each row is greater than the last integer of the previous row.*/

/*Treat Matrix as a one dimension array*/
public class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        if(matrix.length==0) return false;
        
        int row_len = matrix[0].length;
        int col_len = matrix.length;
        int length = row_len * col_len;
        int low = 0; 
        int high = length-1;
        
        while(low <= high){
            int mid = (low+high)/2;
            if(matrix[mid/row_len][mid%row_len] == target){
                return true;
            }else if(matrix[mid/row_len][mid%row_len] > target){
                high = mid-1;
            }else{
                low = mid+1;
            }
        }
        return false;
    }
}