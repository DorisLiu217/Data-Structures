/*Find Mode in Binary Search Tree*/
/*Given a binary search tree (BST) with duplicates, find all the mode(s) (the most frequently occurred element) in the given BST.

Assume a BST is defined as follows:

The left subtree of a node contains only nodes with keys less than or equal to the node's key.
The right subtree of a node contains only nodes with keys greater than or equal to the node's key.
Both the left and right subtrees must also be binary search trees.*/

/*Inorder Traversal get max frequency*/
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    int max = Integer.MIN_VALUE;
    public int[] findMode(TreeNode root) {
        if(root == null) return new int[0];
        
        List<Integer> list = new ArrayList<>();
        Map<Integer, Integer> map = new HashMap<>();
        inOrder(root, map);
        //get mode from hashmap
        for(int key : map.keySet()){
            if(max == map.get(key))
                list.add(key);
        }
        //List to Array
        int res[] = new int[list.size()];
        for(int i = 0; i < res.length; i++){
            res[i] = list.get(i);
        }
        return res;
    }
    
    private void inOrder(TreeNode root, Map<Integer,Integer>map){
        if(root != null){ 
            inOrder(root.left, map);
            map.put(root.val, map.getOrDefault(root.val, 0) + 1);
            max = Math.max(max, map.get(root.val));
            inOrder(root.right, map);
        }
    }
}
