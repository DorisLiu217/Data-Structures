/*Meeting Room II*/
/**
 * Definition for an interval.
 * public class Interval {
 *     int start;
 *     int end;
 *     Interval() { start = 0; end = 0; }
 *     Interval(int s, int e) { start = s; end = e; }
 * }
 */
public class Solution {
    public int minMeetingRooms(Interval[] intervals) {
        if(intervals.length <= 1) return intervals.length;
        
        Arrays.sort(intervals, new Comparator<Interval>(){
            public int compare(Interval a, Interval b){
                return a.start - b.start;
            }
        });
        
        int rooms = 1;
        Queue<Integer> min_end = new PriorityQueue<>(intervals.length, new Comparator<Integer>(){
            public int compare(Integer a, Integer b){ return a - b;}
        });
        min_end.add(intervals[0].end);
        
        for(int i = 1; i < intervals.length; i++){
            if(intervals[i].start < min_end.peek()) 
                rooms++;
            else
                min_end.poll();
            min_end.add(intervals[i].end);
        }
        return rooms;
    }
}